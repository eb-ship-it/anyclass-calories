// ====== –ù–ê–°–¢–†–û–ô–ö–ê ======
const WEBHOOK_URL = 'https://n8n-test.anysports.tv/webhook/analyze';

// ====== DOM ======
const fileInput = document.getElementById('file');
const preview   = document.getElementById('preview');
const btn       = document.getElementById('analyzeBtn');
const loadingEl = document.getElementById('loading');
const loadingTextEl = document.getElementById('loadingText');
const result    = document.getElementById('result');
const errorBox  = document.getElementById('error');

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
const statsCard = document.getElementById('statsCard');
const sKcal = document.getElementById('sKcal');
const sP = document.getElementById('sP');
const sF = document.getElementById('sF');
const sC = document.getElementById('sC');
const sCount = document.getElementById('sCount');
const resetStatsBtn = document.getElementById('resetStats');

let selectedFile = null;

// ---------- –ñ–∏–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä ----------
const LOADING_MESSAGES = [
  "üß† –î—É–º–∞—é –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é‚Ä¶",
  "üîé –ò—â—É –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ —Ñ–æ—Ç–æ",
  "üöÄ –í AnyClass –∫—Ä—É—Ç—ã–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏",
  "ü•£ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–∞—Ä–µ–ª–∫—É",
  "üìö –°–≤–µ—Ä—è—é —Å –±–∞–∑–æ–π –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤",
  "üéì –ï—â—ë –≤ AnyClass –∫—Ä—É—Ç—ã–µ –∫—É—Ä—Å—ã",
  "‚öñÔ∏è –°—á–∏—Ç–∞—é –∫–∞–ª–æ—Ä–∏–∏ –∏ –ë–ñ–£",
  "üß™ –ü—Ä–æ–≤–µ—Ä—è—é —Ç–æ—á–Ω–æ—Å—Ç—å",
  "üßò –õ—ë–≥–∫–∞—è –π–æ–≥–∞ –∂–¥—ë—Ç —Ç–µ–±—è",
  "‚ú® –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ ‚Äî –º–∞–≥–∏—è",
  "üëã –ê–Ω–∞—Å—Ç–∞—Å–∏—è –ë—É—Ä–¥–∞—á –ø–µ—Ä–µ–¥–∞—ë—Ç –ø—Ä–∏–≤–µ—Ç"
];

let loadingTimer = null;
let loadingIndex = 0;

function startLoading() {
  if (!loadingEl) return;
  loadingIndex = 0;
  loadingTextEl.textContent = LOADING_MESSAGES[0];
  loadingEl.style.display = 'inline-flex';

  // –º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ –∫—Ä—É–≥—É
  loadingTimer = setInterval(() => {
    loadingIndex = (loadingIndex + 1) % LOADING_MESSAGES.length;
    loadingTextEl.textContent = LOADING_MESSAGES[loadingIndex];
  }, 1200);
}

function stopLoading() {
  if (!loadingEl) return;
  if (loadingTimer) { clearInterval(loadingTimer); loadingTimer = null; }
  loadingEl.style.display = 'none';
}

// –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ‚Äî —Å–∫—Ä—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
  stopLoading();
  renderStats();
});

// ---------- –£—Ç–∏–ª–∏—Ç—ã ----------
function setError(msg)   { errorBox.textContent = msg || ''; }
function setResult(html) { result.innerHTML = html || ''; }

// ---------- –õ–æ–∫–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ----------
const STATS_KEY_PREFIX = 'stats:';
function todayKey() {
  const d = new Date();
  const y = d.getFullYear();
  const m = String(d.getMonth()+1).padStart(2,'0');
  const day = String(d.getDate()).padStart(2,'0');
  return `${STATS_KEY_PREFIX}${y}-${m}-${day}`;
}
function loadStats() {
  try {
    return JSON.parse(localStorage.getItem(todayKey())) || { kcal:0, protein_g:0, fat_g:0, carb_g:0, count:0 };
  } catch {
    return { kcal:0, protein_g:0, fat_g:0, carb_g:0, count:0 };
  }
}
function renderStats() {
  if (!statsCard) return;
  const s = loadStats();
  statsCard.style.display = s.count > 0 ? 'block' : 'none';
  sKcal.textContent = Math.round(s.kcal);
  sP.textContent = Math.round(s.protein_g);
  sF.textContent = Math.round(s.fat_g);
  sC.textContent = Math.round(s.carb_g);
  sCount.textContent = s.count;
}
function saveStats(totals) {
  const s = loadStats();
  s.kcal = (s.kcal || 0) + Number(totals.kcal || 0);
  s.protein_g = (s.protein_g || 0) + Number(totals.protein_g || 0);
  s.fat_g = (s.fat_g || 0) + Number(totals.fat_g || 0);
  s.carb_g = (s.carb_g || 0) + Number(totals.carb_g || 0);
  s.count = (s.count || 0) + 1;
  localStorage.setItem(todayKey(), JSON.stringify(s));
  renderStats();
}
resetStatsBtn?.addEventListener('click', () => {
  localStorage.removeItem(todayKey());
  renderStats();
});

// ---------- –ü—Ä–µ–≤—å—é –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ ----------
fileInput.addEventListener('change', () => {
  setResult(''); setError('');
  const file = fileInput.files?.[0];
  selectedFile = file || null;

  if (!file) {
    preview.innerHTML = '<span class="muted">–ó–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –ø—Ä–µ–≤—å—é —Ñ–æ—Ç–æ</span>';
    return;
  }
  const url = URL.createObjectURL(file);
  preview.innerHTML = `<img src="${url}" alt="preview" style="width:100%;height:100%;object-fit:cover;"/>`;
});

// ---------- –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ n8n ----------
btn.addEventListener('click', async () => {
  setError(''); setResult('');

  if (!selectedFile) {
    setError('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ñ–æ—Ç–æ.');
    return;
  }

  const fd = new FormData();
  // –í–∞–∂–Ω–æ: –∏–º—è –ø–æ–ª—è 'image' ‚Äî n8n –ø–æ–ª–æ–∂–∏—Ç —Ñ–∞–π–ª –≤ binary.image0
  fd.append('image', selectedFile);

  btn.disabled = true;
  startLoading();

  const controller = new AbortController();
  const t = setTimeout(() => controller.abort(), 30000);

  try {
    const res = await fetch(WEBHOOK_URL, { method: 'POST', body: fd, signal: controller.signal });
    if (!res.ok) {
      const txt = await res.text().catch(() => '');
      throw new Error(`HTTP ${res.status}${txt ? ' ‚Äî ' + txt : ''}`);
    }

    let data = await res.json();
    // –ü–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∏ –ø–æ–¥ —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
    if (Array.isArray(data)) data = data[0] || {};
    if (data && data.json && !data.items) data = data.json;

    renderResult(data);
  } catch (e) {
    setError(`–û—à–∏–±–∫–∞: ${e.message}`);
    console.error(e);
  } finally {
    clearTimeout(t);
    btn.disabled = false;
    stopLoading();
  }
});

function renderResult(data) {
  const items = Array.isArray(data.items) ? data.items : [];
  const totals = data.totals || {};

  if (!items.length) {
    setResult(`
      <h3>‚úÖ –ì–æ—Ç–æ–≤–æ!</h3>
      <div class="muted">–ù–∏—á–µ–≥–æ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ</div>
      <div style="margin-top:10px;">
        <div><strong>–ò—Ç–æ–≥–æ:</strong> 0 –∫–∫–∞–ª</div>
        <div>üçì –ë–µ–ª–∫–∏: 0 –≥</div>
        <div>ü•ë –ñ–∏—Ä—ã: 0 –≥</div>
        <div>üçû –£–≥–ª–µ–≤–æ–¥—ã: 0 –≥</div>
      </div>
    `);
    return;
  }

  const lines = items.map(it => {
    const name = it.name ?? '–ø—Ä–æ–¥—É–∫—Ç';
    const mass = Math.round(Number(it.mass_g ?? 0));
    const kcal = Math.round(Number(it.kcal ?? 0));
    return `‚Ä¢ ${name} (~ ${mass} –≥) ¬∑ ${kcal} –∫–∫–∞–ª`;
  }).join('<br/>');

  const kcal = Math.round(Number(totals.kcal ?? 0));
  const p = Number(totals.protein_g ?? 0);
  const f = Number(totals.fat_g ?? 0);
  const c = Number(totals.carb_g ?? 0);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è
  saveStats({ kcal, protein_g: p, fat_g: f, carb_g: c });

  setResult(`
    <h3>‚úÖ –ì–æ—Ç–æ–≤–æ!</h3>
    <div class="list">${lines}</div>
    <div style="margin-top:14px;">
      <div><strong>–ò—Ç–æ–≥–æ:</strong> ${kcal} –∫–∫–∞–ª</div>
      <div>üçì –ë–µ–ª–∫–∏: ${p}</div>
      <div>ü•ë –ñ–∏—Ä—ã: ${f}</div>
      <div>üçû –£–≥–ª–µ–≤–æ–¥—ã: ${c}</div>
    </div>
  `);
}



