// ====== –ù–ê–°–¢–†–û–ô–ö–ê ======
const WEBHOOK_URL = 'https://n8n-test.anysports.tv/webhook/analyze';

// ====== DOM ======
const fileInput = document.getElementById('file');
const preview   = document.getElementById('preview');
const btn       = document.getElementById('analyzeBtn');
const loadingEl = document.getElementById('loading');
const loadingTextEl = document.getElementById('loadingText');
const result    = document.getElementById('result');
const errorBox  = document.getElementById('error');

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
const statsCard = document.getElementById('statsCard');
const sKcal = document.getElementById('sKcal');
const sP = document.getElementById('sP');
const sF = document.getElementById('sF');
const sC = document.getElementById('sC');
const sCount = document.getElementById('sCount');
const resetStatsBtn = document.getElementById('resetStats');

let selectedFile = null;

// ---------- –ñ–∏–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä (—Ä–æ–≤–Ω–æ —Ç–µ —Ñ—Ä–∞–∑—ã, —á—Ç–æ –¥–∞–ª–∞) ----------
const LOADING_MESSAGES = [
  "üß† –î—É–º–∞—é –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é‚Ä¶",
  "üîé –ò—â—É –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ —Ñ–æ—Ç–æ",
  "üöÄ –í AnyClass –∫—Ä—É—Ç—ã–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏",
  "ü•£ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–∞—Ä–µ–ª–∫—É",
  "üìö –°–≤–µ—Ä—è—é —Å –±–∞–∑–æ–π –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤",
  "üéì –ï—â—ë –≤ AnyClass –∫—Ä—É—Ç—ã–µ –∫—É—Ä—Å—ã",
  "‚öñÔ∏è –°—á–∏—Ç–∞—é –∫–∞–ª–æ—Ä–∏–∏ –∏ –ë–ñ–£",
  "üß™ –ü—Ä–æ–≤–µ—Ä—è—é —Ç–æ—á–Ω–æ—Å—Ç—å",
  "üßò –õ—ë–≥–∫–∞—è –π–æ–≥–∞ –∂–¥—ë—Ç —Ç–µ–±—è",
  "‚ú® –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ ‚Äî –º–∞–≥–∏—è",
  "üëã –ê–Ω–∞—Å—Ç–∞—Å–∏—è –ë—É—Ä–¥—é–≥ –ø–µ—Ä–µ–¥–∞—ë—Ç –ø—Ä–∏–≤–µ—Ç"
];
const LOADING_INTERVAL = 1200; // –º—Å –º–µ–∂–¥—É —Ñ—Ä–∞–∑–∞–º–∏

let loadingTimer = null;
let loadingIndex = 0;

function startLoading() {
  if (!loadingEl) return;
  loadingIndex = 0;
  loadingTextEl.textContent = LOADING_MESSAGES[0];
  loadingEl.style.display = 'inline-flex';
  loadingTimer = setInterval(() => {
    loadingIndex = (loadingIndex + 1) % LOADING_MESSAGES.length;
    loadingTextEl.textContent = LOADING_MESSAGES[loadingIndex];
  }, LOADING_INTERVAL);
}
function stopLoading() {
  if (loadingTimer) clearInterval(loadingTimer);
  loadingEl.style.display = 'none';
}

// ---------- –£—Ç–∏–ª–∏—Ç—ã ----------
function setError(msg){ errorBox.textContent = msg || ''; }
function setResult(html){ result.innerHTML = html || ''; }
function round(n){ return Math.round(Number(n||0)); }

// ---------- –õ–æ–∫–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ----------
const STATS_KEY_PREFIX = 'stats:';
function todayKey(){
  const d = new Date();
  const y = d.getFullYear();
  const m = String(d.getMonth()+1).padStart(2,'0');
  const day = String(d.getDate()).padStart(2,'0');
  return `${STATS_KEY_PREFIX}${y}-${m}-${day}`;
}
function loadStats(){
  try { return JSON.parse(localStorage.getItem(todayKey())) || {kcal:0,protein_g:0,fat_g:0,carb_g:0,count:0}; }
  catch { return {kcal:0,protein_g:0,fat_g:0,carb_g:0,count:0}; }
}
function renderStats(){
  const s = loadStats();
  statsCard.style.display = s.count>0 ? 'block' : 'none';
  sKcal.textContent = round(s.kcal);
  sP.textContent = round(s.protein_g);
  sF.textContent = round(s.fat_g);
  sC.textContent = round(s.carb_g);
  sCount.textContent = s.count;
}
function saveStats(totals){
  const s = loadStats();
  s.kcal      += Number(totals.kcal||0);
  s.protein_g += Number(totals.protein_g||0);
  s.fat_g     += Number(totals.fat_g||0);
  s.carb_g    += Number(totals.carb_g||0);
  s.count     += 1;
  localStorage.setItem(todayKey(), JSON.stringify(s));
  renderStats();
}
resetStatsBtn?.addEventListener('click', () => {
  localStorage.removeItem(todayKey());
  renderStats();
});

// ---------- –ü—Ä–µ–≤—å—é —Ñ–∞–π–ª–∞ ----------
fileInput.addEventListener('change', () => {
  setResult(''); setError('');
  const file = fileInput.files?.[0];
  selectedFile = file || null;
  if (!file){
    preview.innerHTML = '<span class="muted">–ó–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –ø—Ä–µ–≤—å—é —Ñ–æ—Ç–æ</span>';
    return;
  }
  const url = URL.createObjectURL(file);
  preview.innerHTML = `<img src="${url}" alt="preview">`;
});

// ---------- –ê–Ω–∞–ª–∏–∑ (–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞) ----------
btn.addEventListener('click', async () => {
  setError(''); setResult('');
  if (!selectedFile){
    setError('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ñ–æ—Ç–æ.');
    return;
  }

  const fd = new FormData();
  fd.append('image', selectedFile);

  btn.disabled = true;
  startLoading();

  const controller = new AbortController();
  const timeoutId = setTimeout(() => controller.abort(), 30000);

  try {
    const res = await fetch(WEBHOOK_URL, { method:'POST', body:fd, signal:controller.signal });
    if (!res.ok){
      const txt = await res.text().catch(()=> '');
      throw new Error(`HTTP ${res.status}${txt ? ' ‚Äî ' + txt : ''}`);
    }
    let data = await res.json();
    if (Array.isArray(data)) data = data[0] || {};
    if (data && data.json && !data.items) data = data.json;

    stopLoading();         // << —Å—Ä–∞–∑—É —Å–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
    btn.disabled = false;

    renderResult(data);
  } catch (e){
    stopLoading();         // << —Ç–æ–∂–µ —Å—Ä–∞–∑—É —Å–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
    btn.disabled = false;
    console.error(e);
    setError(`–û—à–∏–±–∫–∞: ${e.message}`);
  } finally {
    clearTimeout(timeoutId);
  }
});

// ---------- –†–µ–Ω–¥–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–∫–∞—Ä—Ç–æ—á–∫–∏) ----------
function renderResult(data){
  const items = Array.isArray(data.items)? data.items : [];
  const totals = data.totals || {};
  const kcal = round(totals.kcal);
  const p = Number(totals.protein_g||0);
  const f = Number(totals.fat_g||0);
  const c = Number(totals.carb_g||0);
  const sumMacros = Math.max(1, p+f+c);
  const pctP = Math.round(p/sumMacros*100);
  const pctF = Math.round(f/sumMacros*100);
  const pctC = Math.round(c/sumMacros*100);

  if (!items.length){
    setResult(`
      <div class="totals-card">
        <div class="kcal-big">0 <small>–∫–∫–∞–ª</small></div>
        <div class="muted" style="margin-top:6px;">–ù–∏—á–µ–≥–æ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ</div>
      </div>
    `);
    return;
  }

  // –∫–∞—Ä—Ç–æ—á–∫–∞ totals
  const totalsHTML = `
    <div class="totals-card">
      <div class="kcal-big">${kcal} <small>–∫–∫–∞–ª</small></div>
      <div class="bars">
        <div class="bar protein" style="--val:${pctP}%"><span></span></div>
        <div class="bar-label">–ë–µ–ª–∫–∏: ${p.toFixed(1)} –≥</div>
        <div class="bar fat" style="--val:${pctF}%"><span></span></div>
        <div class="bar-label">–ñ–∏—Ä—ã: ${f.toFixed(1)} –≥</div>
        <div class="bar carb" style="--val:${pctC}%"><span></span></div>
        <div class="bar-label">–£–≥–ª–µ–≤–æ–¥—ã: ${c.toFixed(1)} –≥</div>
      </div>
    </div>
  `;

  // –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–æ–¥—É–∫—Ç—É
  const itemCards = items.map((it) => {
    const name = it.name ?? '–ø—Ä–æ–¥—É–∫—Ç';
    const mass = round(it.mass_g);
    const kcalItem = round(it.kcal);
    const ip = Number(it.protein_g||0).toFixed(1);
    const iff = Number(it.fat_g||0).toFixed(1);
    const ic = Number(it.carb_g||0).toFixed(1);

    return `
      <div class="item-card">
        <div class="item-head">
          <div class="item-name">${escapeHtml(name)}</div>
          <div class="kcal-badge">${kcalItem} –∫–∫–∞–ª</div>
        </div>
        <div class="chips">
          <span class="chip">~ ${mass} –≥</span>
          <span class="chip">–ë ${ip}</span>
          <span class="chip">–ñ ${iff}</span>
          <span class="chip">–£ ${ic}</span>
        </div>
      </div>
    `;
  }).join('');

  setResult(`
    ${totalsHTML}
    <div class="items-grid">${itemCards}</div>
  `);

  // –æ–±–Ω–æ–≤–∏–º –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  saveStats({kcal, protein_g:p, fat_g:f, carb_g:c});
}

// –ø—Ä–æ—Å—Ç–µ–π—à–∏–π —ç—Å–∫–µ–π–ø
function escapeHtml(str){
  return String(str).replace(/[&<>"']/g, s => (
    { '&':'&amp;', '<':'&lt;', '>':'&gt;', '"':'&quot;', "'":'&#39;' }[s]
  ));
}

// —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞
document.addEventListener('DOMContentLoaded', () => {
  stopLoading();
  renderStats();
});
